import Config

# Configure your database
config :puzzlespace, Puzzlespace.Repo,
  username: "postgres",
  password: "postgres",
  database: "puzzlespace_dev",
  hostname: "localhost",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :puzzlespace, PuzzlespaceWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :puzzlespace, PuzzlespaceWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/puzzlespace_web/{live,views}/.*(ex)$",
      ~r"lib/puzzlespace_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime


config STPuzzleCoordinator, 
  connopts: [ 
    host: "192.168.1.142",
    port: 5672,
    username: "psserver",
    password: "fizzbuzz",
  ],
  queues: [
    bridges: "stbridges",
    unruly: "stunruly",
    loopy: "stloopy",
    dominosa: "stdominosa",
    filling: "stfilling",
    keen: "stkeen",
    mines: "stmines",
    net: "stnet",
    netslide: "stnetslide",
    palisade: "stpalisade",
    pattern: "stpattern",
    pearl: "stpearl",
    range: "strange",
    rectangles: "strectangles",
    singles: "stsingles",
    slant: "stslant",
    solo: "stsolo",
    tents: "sttents",
    towers: "sttowers",
    tracks: "sttracks",
    undead: "stundead",
  ],
  default_config: %{
    bridges: %{
      "Height" => 7,
      "Width" => 7,
      "Difficulty" => "Easy",
      "Allow loops" => false,
      "%age of island squares" => "15%",
      "Expansion factor (%age)" => "30%",
      "Max. bridges per direction" => "3",
    },
    unruly: %{
      "Width" => 8,
      "Height" => 8,
      "Unique rows and columns" => false,
      "Difficulty" => "Normal",
    },
    loopy: %{
      "Width" => 7,
      "Height" => 7,
      "Difficulty" => "Easy",
      "Grid type" => "Squares",
    },
    dominosa: %{
      "Maximum number on dominoes" => "6",
      "Difficulty" => "Basic",
    },
    filling: %{
      "Width" => "13",
      "Height" => "9",
    },
    keen: %{
      "Grid size" => "6",
      "Difficulty" => "Normal",
      "Multiplication only" => false,
    },
    mines: %{
      "Width" => "9",
      "Height" => "9",
      "Mines" => "10",
      "Ensure solubility" => true,
    },
    net: %{
      "Width" => "5",
      "Height" => "5",
      "Walls wrap around" => false,
      "Barrier probability" => 0,
      "Ensure unique solution" => true,
    },
    netslide: %{
      "Width" => "5",
      "Height" => "5",
      "Walls wrap around" => false,
      "Barrier probability" => 0,
      "Number of shuffling moves" => 0,
    },
    palisade: %{
      "Width" => "5",
      "Height" => "5",
      "Region size" => "5",
    },
    pattern: %{
      "Width" => "15",
      "Height" => "15",
    },
    pearl: %{
      "Width" => "8",
      "Height" => "8",
      "Difficulty" => "Tricky",
      "Allow unsoluble" => false,
    },
    range: %{
      "Width" => "9",
      "Height" => "6",
    },
    rectangles: %{
      "Width" => 7,
      "Height" => "7",
      "Expansion factor" => "0",
      "Ensure unique solution" => true,
    },
    singles: %{
      "Width" => "5",
      "Height" => "5",
      "Difficulty" => "Easy",
    },
    slant: %{
      "Width" => "8",
      "Height" => "8",
      "Difficulty" => "Easy",
    },
    solo: %{
      "Columns of sub-blocks" => "3",
      "Rows of sub-blocks" => "3",
      "\"X\" (require every number in each main diagonal)" => false,
      "Jigsaw (irregularly shaped sub-blocks)" => false,
      "Killer (digit sums)" => false,
      "Symmetry" => "2-way rotation",
      "Difficulty" => "Basic",
    },
    tents: %{
      "Width" => "8",
      "Height" => "8",
      "Difficulty" => "Easy",
    },
    towers: %{
      "Grid size" => "5",
      "Difficulty" => "Easy",
    },
    tracks: %{
      "Width" => "8",
      "Height" => "8",
      "Difficulty" => "Easy",
      "Disallow consecutive 1 clues" => false,
    },
    undead: %{
      "Width" => "8",
      "Height" => "8",
      "Difficulty" => "Easy",
    }
  }

config Puzzlespace.Authentication,
  token_lifespan: 60*60*24

config :puzzlespace, Puzzlespace.Repo,
  migration_primary_key: [name: :id, type: :binary_id, autogenerate: true]

